(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{483:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_1-库操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-库操作"}},[t._v("#")]),t._v(" 1 库操作")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 创建库 \ncreate database db1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 创建库是否存在，不存在则创建 \ncreate database "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" not exists db1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 查看所有数据库 \nshow databases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 查看某个数据库的定义信息 \nshow create database db1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 修改数据库字符信息 \nalter database db1 character "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 删除数据库 \ndrop database db1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-表结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-表结构"}},[t._v("#")]),t._v(" 2 表结构")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 查看表结构 \ndesc 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 查看创建表的SQL语句 \nshow create table 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 修改表名 \nalter table 表名 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),t._v(" to 新的表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 添加一列 \nalter table 表名 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" 列名 数据类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 删除列 \nalter table 表名 drop 列名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 删除表 \ndrop table 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" drop table "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" exists 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 查询表字段 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" COLUMN_NAME,COLUMN_COMMENT from information_schema."),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("COLUMNS")]),t._v(" where table_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t_commentsource'")]),t._v(" and table_schema "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'db_smart_center'")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-增加-insert-into"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-增加-insert-into"}},[t._v("#")]),t._v(" 3 增加 insert into")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 写全所有列名 \ninsert into 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名1, 列名2, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("., 列名n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" values "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值1, 值2, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("., 值n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 不写列名（所有列全部添加） \ninsert into 表名 values "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值1, 值2, "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("., 值n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 插入部分数据 \ninsert into 表名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("列名1, 列名2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" values "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("值1, 值2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-删除-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-删除-delete"}},[t._v("#")]),t._v(" 4 删除 delete")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 删除表中数据 \ndelete from 表名 where 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 删除表中所有数据 \ndelete from 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 删除表中所有数据（高效，先删除表，然后再创建一张一样的表） \ntruncate table 表名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-修改-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-修改-update"}},[t._v("#")]),t._v(" 5 修改 update")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 不带条件的修改（会修改所有行） \nupdate 表名 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 带条件的修改 \nupdate 表名 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 值 where 列名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 值"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_6-排序查询-order-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-排序查询-order-by"}},[t._v("#")]),t._v(" 6 排序查询 order by")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 语法：order by 子句 \n\n-- 例子 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from person order by math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" -- 默认升序 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from person order by math desc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" -- 降序\n")])])]),a("h3",{attrs:{id:"_7-分组查询-group-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-分组查询-group-by"}},[t._v("#")]),t._v(" 7 分组查询 group by")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 聚合函数：将一列数据作为一个整体进行纵向的计算 count：计算个数 max：计算最大值 min：计算最小值 sum：计算和 avg：计算平均数 \n\n-- 分组查询 语法：group by 分组字段 \n\n-- 按性别分组。分别查询男女同学的平均分 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" gender, avg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from student group by gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 按性别分组。分别查询男女同学的平均分，人数。 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" gender, avg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" , count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from student group by gender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_8-分页查询-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-分页查询-limit"}},[t._v("#")]),t._v(" 8 分页查询 limit")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 语法：limit 开始的索引, 每页查询的条数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n-- 公式：开始的索引 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" （当前的页码 - "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("） * 每页显示的条数 \n-- 注意：limit 是一个mysql方言 \n\n-- 示例 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from student limit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0,3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" -- 第1页 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from student limit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6,3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" -- 第2页 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from student limit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9,3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" -- 第3页\n")])])]),a("h3",{attrs:{id:"_9-子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-子查询"}},[t._v("#")]),t._v(" 9 子查询")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 子查询：查询中的嵌套查询 \n-- 示例：查询年龄最高的人员信息 \n\n-- "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 查询最高的年龄 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" 查询人员信息，并且年龄等于30的 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from emp where emp."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 一条sql就可以完成这个操作，这就是子查询 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from emp where emp."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" from emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_10-连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-连接查询"}},[t._v("#")]),t._v(" 10 连接查询")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("-- 左外连接 \n-- 查询的表示左表所有数据以及其交集部分 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 字段列表 from 表1 left "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("outer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" 表2 on 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 右外连接 \n-- 查询的表示右表所有数据以及其交集部分 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" 字段列表 from 表1 right "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("outer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" 表2 on 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n-- 多表查询 添加条件消除笛卡尔积 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" * from emp, dept where "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("emp.dept_id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("dept.id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_11-参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-参考"}},[t._v("#")]),t._v(" 11 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/m0_53022813/article/details/123972438",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL----多表查询_计科_xiao_cai_ji的博客-CSDN博客_mysql多表查询"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);